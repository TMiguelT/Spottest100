{"version":3,"sources":["about.js","menu.js","frame.js","login.js","util.js","trackList.js","app.js","serviceWorker.js","index.js"],"names":["about","handleClose","open","Dialog","onClose","DialogTitle","DialogContent","Typography","variant","gutterBottom","Link","href","Alert","severity","style","display","Menu","useState","aboutOpen","setAboutOpen","AppBar","position","Toolbar","flex","Button","size","color","onClick","target","Frame","children","Container","maxWidth","Grid","container","justify","item","textAlign","Login","loginUrl","Box","mt","md","fullWidth","isEligible","track","year","date","Date","album","release_date","eligibilityPeriod","start","end","TrackList","content","homeUrl","longTerm","mediumTerm","shortTerm","tablePage","setTablePage","uniqueArtists","setUniqueArtists","currentTab","setCurrentTab","currentYear","votingCloses","getFullYear","upcomingYear","setYear","tracks","useMemo","ret","uniqBy","concat","filter","artists","name","length","Table","tableLayout","TableHead","TableRow","TableCell","width","TableBody","slice","map","i","external_urls","spotify","artist","arr","push","TableFooter","TablePagination","page","count","onChangePage","e","newPage","rowsPerPage","rowsPerPageOptions","my","Paper","FormGroup","row","alignItems","Tooltip","title","aria-label","TextField","margin","label","type","value","onChange","FormControlLabel","marginLeft","control","Switch","checked","Tabs","indicatorColor","textColor","Tab","TableContainer","component","window","location","origin","pathname","client","Client","instance","settings","clientId","scopes","redirect_uri","App","useLocation","hash","qs","parse","substring","token","access_token","setLoginUrl","retrievalState","setRetrievalState","setShortTerm","setMediumTerm","setLongTerm","useEffect","login","then","url","UserHandler","me","user","Promise","all","term","top","catch","err","replace","CircularProgress","Boolean","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da250bd4.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Alert from '@material-ui/lab/Alert';\n\nexport default function about({ handleClose, open }) {\n    return (\n        <Dialog onClose={handleClose} open={open}>\n            <DialogTitle>About Spottest 100</DialogTitle>\n            <DialogContent>\n                <Typography variant={'body1'} gutterBottom>\n                    Spottest 100 is\n                    a <Link href=\"https://en.wikipedia.org/wiki/Free_and_open-source_software\">free\n                    and\n                    open source</Link> web application designed to simplify the process of choosing\n                    your top 10 songs for\n                    the year for triple j's\n                    annual <Link href=\"https://www.abc.net.au/triplej/hottest100\">Hottest 100\n                </Link> music poll.\n                </Typography>\n                <Typography variant={'body1'} gutterBottom>\n                    This application works by using the Spotify <Link\n                    href=\"https://developer.spotify.com/documentation/web-api/\">Web API</Link> to\n                    request your\n                    most listened songs, and then by filtering them down to only songs eligible for\n                    this year's Hottest\n                    100.\n                </Typography>\n                <Typography variant={'body1'} gutterBottom>\n                    Unfortunately, the only information Spotify is willing to provide about your\n                    library is three lists\n                    of 50 songs:\n                    <ul>\n                        <li>Long term: your favourite songs of all time</li>\n                        <li>Medium term: your favourite songs from the past 6 months</li>\n                        <li>Short term: your favourite songs from the past 4 weeks</li>\n                    </ul>\n                    Spottest 100 provides these three lists (filtered down to eligible songs), along\n                    with one&nbsp;<em>\n                    combined</em>&nbsp;list, which combines the three lists, putting long-term\n                    favourites before\n                    medium-term favourites,\n                    before short-term favourites, because songs you have listened to for a longer\n                    period of time are\n                    more likely to be your favourite songs of the year.\n                </Typography>\n                <Alert severity=\"info\">\n                    <span>\n                        Note: Spottest 100 can make a mistake if you have\n                    listened to an album version of a song, which was released earlier as\n                    a single. For example, <Link style={{ display: 'inline' }}\n                        href=\"https://open.spotify.com/track/6PZB6knLs42luWiiE6pCD9?si=jU_KY10rQcWNTBVB6ay97g\">Dinosaurs\n                    by Ruby Fields</Link>, off the album <em>Permanent Hermit</em> is not legal in\n                        2019, because the single was released in 2018. Keep this in mind before\n                        submitting your Hottest 100.\n                    </span>\n                </Alert>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nimport About from './about';\n\nexport default function Menu() {\n    const [aboutOpen, setAboutOpen] = useState(false);\n\n    return (\n        <>\n            <About\n                handleClose={() => {\n                    setAboutOpen(false);\n                }}\n                open={aboutOpen}\n            />\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography style={{flex: 1}} variant=\"h6\">\n                        Spottest 100\n                    </Typography>\n                    <Button size={'large'} color={'inherit'} onClick={() => {\n                        setAboutOpen(true);\n                    }}>About</Button>\n                    <Button size={'large'} color={'inherit'} target=\"_blank\" href={\"https://github.com/TMiguelT/Spottest100\"}>Source Code</Button>\n                    <Button size={'large'} color={'inherit'} target=\"_blank\" href={\"https://github.com/TMiguelT/Spottest100/issues\"}>Report an Issue</Button>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Menu from './menu';\n\nexport default function Frame({children}) {\n    return (\n        <>\n            <Menu/>\n            <Container maxWidth={'md'}>\n                <Grid container justify={'center'}>\n                    <Grid item style={{\n                        textAlign: 'center',\n                    }}>\n                        <Typography variant={'h2'}>\n                            Spottest 100\n                        </Typography>\n                        <Typography variant={'subtitle1'}>\n                            A calculator for your triple j Hottest 100 votes, using your music library\n                        </Typography>\n                        {children}\n                    </Grid>\n                </Grid>\n            </Container>\n        </>\n    );\n}","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nexport default function Login({ loginUrl }) {\n    return (\n        <Box mt={'20px'}>\n            <Grid container justify={'center'}>\n                <Grid item md={6}>\n                    <Button\n                        fullWidth\n                        variant={'contained'}\n                        size={'large'}\n                        color={'primary'}\n                        href={loginUrl}\n                    >\n                        Login with Spotify\n                    </Button>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n}","/**\n * Gets the start (inclusive) and end (exclusive) dates for eligible songs in that year. e.g. for 2019 this would be\n * 1 December 2018 and 30 November 2019\n */\nexport function eligibilityPeriod(year) {\n    return [\n        new Date(year - 1, 11, 1), // December of the previous year\n        new Date(year, 11, 1), // December of the current year is too late\n    ];\n}\n\n/**\n * Calculates the next Hottest 100 year based on the date\n */\nexport function upcomingYear(date) {\n    const votingCloses = new Date(\n        date.getFullYear(),\n        0,\n        28,\n        3,\n    );\n\n    if (date < votingCloses) {\n        // If we're before the Hottest 100 date, the current year is the upcoming year\n        return date.getFullYear() - 1;\n    }\n    else {\n        // If we're after the Hottest 100 date, next year is the upcoming year\n        return date.getFullYear();\n    }\n}\n\n\n/**\n * Returns true if a track is eligible for the given year of hottest 100\n */\nexport function isEligible(track, year) {\n    const date = new Date(track.album.release_date);\n    const [start, end] = eligibilityPeriod(year);\n    return date >= start && date < end;\n}\n","import React, {useMemo, useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from '@material-ui/lab/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Tabs from '@material-ui/core/Tabs';\n\nimport uniqBy from 'lodash.uniqby';\n\nimport {isEligible, upcomingYear} from './util';\n\nexport default function TrackList({homeUrl, longTerm, mediumTerm, shortTerm}) {\n    const [tablePage, setTablePage] = useState(0);\n    const [uniqueArtists, setUniqueArtists] = useState(false);\n    const [currentTab, setCurrentTab] = useState(0);\n    const currentYear = upcomingYear(new Date());\n    const [year, setYear] = useState(currentYear);\n\n    // Filter the tracks to the top 10, choosing longer term favourites where possible\n    const tracks = useMemo(() => {\n        let ret;\n        switch (currentTab) {\n            case 0:\n                // Combined\n                ret = uniqBy(\n                    longTerm\n                        .concat(mediumTerm, shortTerm)\n                        .filter(track => isEligible(track, year)),\n                    'id',\n                );\n                break;\n            case 1:\n                ret = longTerm.filter(track => isEligible(track, year));\n                break;\n            case 2:\n                ret = mediumTerm.filter(track => isEligible(track, year));\n                break;\n            case 3:\n                ret = shortTerm.filter(track => isEligible(track, year));\n                break;\n        }\n\n        if (uniqueArtists) {\n            // If unique by artist, filter by the first artist who tends to be the main one\n            return uniqBy(ret, track => {\n                return track.artists[0].name;\n            });\n        }\n        else {\n            return ret;\n        }\n\n    }, [shortTerm, mediumTerm, longTerm, year, uniqueArtists, currentTab]);\n\n    let content;\n    if (tracks.length === 0) {\n        content = <Alert severity=\"info\">\n            Spotify can't find any eligible tracks for the chosen year, over this listening period\n        </Alert>;\n    }\n    else {\n        content = (\n            <Table style={{tableLayout: 'fixed'}}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell style={{width: '10%'}}>Rank</TableCell>\n                        <TableCell style={{width: '45%'}}>Song</TableCell>\n                        <TableCell style={{width: '45%'}}>Artists</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        tracks\n                            .slice(tablePage * 10, tablePage * 10 + 10)\n                            .map((track, i) => {\n                                return (\n                                    <TableRow>\n                                        <TableCell>{tablePage * 10 + i + 1}</TableCell>\n                                        <TableCell>\n                                            <Link href={track.external_urls.spotify}\n                                                  target=\"_blank\">\n                                                {track.name}\n                                            </Link>\n                                        </TableCell>\n                                        <TableCell>{\n                                            track.artists.map((artist, i, arr) => {\n                                                const children = [\n                                                    <Link\n                                                        href={artist.external_urls.spotify}\n                                                        target=\"_blank\">\n                                                        {artist.name}\n                                                    </Link>,\n                                                ];\n                                                if (i < arr.length - 1) {\n                                                    children.push(<span>, </span>);\n                                                }\n                                                return <>{children}</>;\n                                            })\n                                        }\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })\n                    }\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TablePagination\n                            page={tablePage}\n                            count={tracks.length}\n                            onChangePage={(e, newPage) => {\n                                setTablePage(newPage);\n                            }}\n                            rowsPerPage={10}\n                            rowsPerPageOptions={[10]}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        );\n    }\n\n    return (\n        <>\n            <Box my={'20px'}>\n                <Grid container justify={'center'}>\n                    <Grid item md={6}>\n                        <Button\n                            fullWidth\n                            variant={'contained'}\n                            size={'large'}\n                            color={'primary'}\n                            href={homeUrl}\n                        >\n                            Logout\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Paper>\n                <Grid container justify={'center'}>\n                    <Grid item>\n                        <FormGroup row style={{\n                            alignItems: 'flex-end',\n                        }}>\n                            <Tooltip title=\"e.g. the Hottest 100 for 2018 was held in January 2019\" aria-label=\"add\">\n                                <TextField\n                                    margin={'dense'}\n                                    label=\"Year\"\n                                    type=\"number\"\n                                    value={year}\n                                    onChange={e => {\n                                        setYear(e.target.value);\n                                    }}\n                                />\n                            </Tooltip>\n                            <Tooltip title=\"Only choose your favourite song from each artist\" aria-label=\"add\">\n                                <FormControlLabel\n                                    style={{\n                                        marginLeft: '1em'\n                                    }}\n                                    control={\n                                        <Switch\n                                            checked={uniqueArtists}\n                                            onChange={e => {\n                                                setUniqueArtists(e.target.checked);\n                                            }}\n                                        />\n                                    }\n                                    label={'Unique Artists'}\n                                />\n                            </Tooltip>\n                        </FormGroup>\n                    </Grid>\n                </Grid>\n                <Tabs\n                    variant={'fullWidth'}\n                    value={currentTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(e, value) => {\n                        setCurrentTab(value);\n                        setTablePage(0);\n                    }}\n                >\n                    <Tooltip title={'All of your favourites in sorted order'}>\n                        <Tab label=\"Combined\"/>\n                    </Tooltip>\n                    <Tooltip title={'Only songs that are your all-time favourites'}>\n                        <Tab label=\"Long Term\"/>\n                    </Tooltip>\n                    <Tooltip title={'What you have been listening to for the last 6 months'}>\n                        <Tab label=\"Medium Term\"/>\n                    </Tooltip>\n                    <Tooltip title={'What you have been listening to for the last 4 weeks'}>\n                        <Tab label=\"Short Term\"/>\n                    </Tooltip>\n                </Tabs>\n                <TableContainer component={Paper}>\n                    {content}\n                </TableContainer>\n            </Paper>\n        </>\n    );\n}","import React, {useEffect, useMemo, useState} from 'react';\nimport './app.css';\nimport {Client, UserHandler} from 'spotify-sdk';\nimport {useLocation} from 'react-router-dom';\nimport qs from 'qs';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Frame from './frame';\nimport Login from './login';\nimport TrackList from './trackList';\n\nconst homeUrl = window.location.origin + window.location.pathname;\n\n// Set Spotify API settings\nlet client = Client.instance;\nclient.settings = {\n    clientId: '9c91bacd3cc149c4ac198f88b2468719',\n    scopes: ['user-top-read'],\n    redirect_uri: homeUrl,\n};\n\nfunction App() {\n    const location = useLocation();\n    const hash = useMemo(() => {\n        return qs.parse(location.hash.substring(1));\n    }, [location.hash]);\n    client.token = hash.access_token;\n    const [loginUrl, setLoginUrl] = useState(null);\n    const [retrievalState, setRetrievalState] = useState('notRequested');\n    const [shortTerm, setShortTerm] = useState([]);\n    const [mediumTerm, setMediumTerm] = useState([]);\n    const [longTerm, setLongTerm] = useState([]);\n\n\n    // If we don't have a login url, request it\n    useEffect(() => {\n        if (!('access_token' in hash)) {\n            client.login().then((url) => {\n                setLoginUrl(url);\n            });\n        }\n    }, [hash]);\n\n    // If we don't yet have the user data, request it\n    useEffect(() => {\n        if (retrievalState === 'notRequested' && 'access_token' in hash) {\n            // Only request once\n            setRetrievalState('requested');\n            new UserHandler().me().then(user => {\n                return Promise.all(['short_term', 'medium_term', 'long_term'].map(term => {\n                    return user.top('tracks', {\n                        'time_range': term,\n                        'limit': 50,\n                    });\n                }));\n            }).then(([shortTerm, mediumTerm, longTerm]) => {\n                setRetrievalState('retrieved');\n                setShortTerm(shortTerm);\n                setMediumTerm(mediumTerm);\n                setLongTerm(longTerm);\n            }).catch(err => {\n                // If the request failed, the access token is wrong or out of date, so make the user login again\n                window.location.replace(homeUrl);\n            });\n        }\n    }, [retrievalState, hash, hash.access_token]);\n\n\n    let content;\n    if (retrievalState === 'retrieved') {\n        content = <TrackList\n            homeUrl={homeUrl}\n            shortTerm={shortTerm}\n            mediumTerm={mediumTerm}\n            longTerm={longTerm}\n        />\n    } else if (!('access_token' in hash)) {\n        content = <Login loginUrl={loginUrl} />\n    } else {\n        content = <CircularProgress/>;\n    }\n\n    return <Frame>\n        {content}\n    </Frame>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nReactDOM.render(\n    <Router>\n        <CssBaseline>\n            <App/>\n        </CssBaseline>\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}