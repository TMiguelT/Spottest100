{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["homeUrl","window","location","origin","pathname","client","Client","instance","isEligible","track","year","date","Date","album","release_date","eligibilityPeriod","start","end","settings","clientId","scopes","redirect_uri","App","useLocation","hash","useMemo","qs","parse","substring","token","access_token","useState","uniqueArtists","setUniqueArtists","loginUrl","setLoginUrl","retrievalState","setRetrievalState","shortTerm","setShortTerm","mediumTerm","setMediumTerm","longTerm","setLongTerm","tablePage","setTablePage","currentTab","setCurrentTab","currentYear","votingCloses","getFullYear","upcomingYear","setYear","useEffect","login","then","url","UserHandler","me","user","Promise","all","map","term","top","content","tracks","ret","uniqBy","concat","filter","artists","name","Box","my","Grid","container","justify","item","md","Button","fullWidth","variant","size","color","href","Paper","FormGroup","row","TextField","label","type","value","onChange","e","target","FormControlLabel","control","Checkbox","checked","Tabs","indicatorColor","textColor","Tab","TableContainer","component","Table","style","tableLayout","TableHead","TableRow","TableCell","width","TableBody","slice","i","Link","external_urls","spotify","artist","arr","children","length","push","TableFooter","TablePagination","page","count","onChangePage","newPage","rowsPerPage","rowsPerPageOptions","CircularProgress","mt","Container","maxWidth","textAlign","Typography","Boolean","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.654052ed.chunk.js","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport './App.css';\nimport { Client, UserHandler } from 'spotify-sdk';\nimport { useLocation } from 'react-router-dom';\nimport qs from 'qs';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport uniqBy from 'lodash.uniqby';\n\nconst homeUrl = window.location.origin + window.location.pathname;\n\n// Set Spotify API settings\nlet client = Client.instance;\nclient.settings = {\n    clientId: '9c91bacd3cc149c4ac198f88b2468719',\n    scopes: ['user-top-read'],\n    redirect_uri: homeUrl,\n};\n\n/**\n * Gets the start and end dates for eligible songs in that year. e.g. for 2019 this would be\n * 1 December 2018 and 30 November 2019\n */\nfunction eligibilityPeriod(year) {\n    return [\n        new Date(year - 1, 11), // December of the previous year\n        new Date(year, 10), // November of the current year\n    ];\n}\n\n/**\n * Calculates the next Hottest 100 year based on the date\n * @param date\n */\nfunction upcomingYear(date) {\n    const votingCloses = new Date(\n        date.getFullYear(),\n        0,\n        28,\n        3,\n    );\n\n    if (date < votingCloses) {\n        // If we're before the Hottest 100 date, the current year is the upcoming year\n        return date.getFullYear() - 1;\n    } else {\n        // If we're after the Hottest 100 date, next year is the upcoming year\n        return date.getFullYear();\n    }\n}\n\n\n/**\n * Returns true if a track is eligible for the given year of hottest 100\n */\nfunction isEligible(track, year) {\n    const date = new Date(track.album.release_date);\n    const [start, end] = eligibilityPeriod(year);\n    return date >= start && date <= end;\n}\n\nfunction App() {\n    const location = useLocation();\n    const hash = useMemo(() => {\n        return qs.parse(location.hash.substring(1));\n    }, [location.hash]);\n    client.token = hash.access_token;\n    const [uniqueArtists, setUniqueArtists] = useState(false);\n    const [loginUrl, setLoginUrl] = useState(null);\n    const [retrievalState, setRetrievalState] = useState('notRequested');\n    const [shortTerm, setShortTerm] = useState([]);\n    const [mediumTerm, setMediumTerm] = useState([]);\n    const [longTerm, setLongTerm] = useState([]);\n    const [tablePage, setTablePage] = useState(0);\n    const [currentTab, setCurrentTab] = useState(0);\n\n    const currentYear = upcomingYear(new Date());\n    const [year, setYear] = useState(currentYear);\n\n    // If we don't have a login url, request it\n    useEffect(() => {\n        if (!('access_token' in hash)) {\n            client.login().then((url) => {\n                setLoginUrl(url);\n            });\n        }\n    }, [hash]);\n\n    // If we don't yet have the user data, request it\n    useEffect(() => {\n        if (retrievalState === 'notRequested' && 'access_token' in hash) {\n            // Only request once\n            setRetrievalState('requested');\n            new UserHandler().me().then(user => {\n                return Promise.all(['short_term', 'medium_term', 'long_term'].map(term => {\n                    return user.top('tracks', {\n                        'time_range': term,\n                        'limit': 50,\n                    });\n                }));\n            }).then(([shortTerm, mediumTerm, longTerm]) => {\n                setRetrievalState('retrieved');\n                setShortTerm(shortTerm);\n                setMediumTerm(mediumTerm);\n                setLongTerm(longTerm);\n            });\n        }\n    }, [retrievalState, hash, hash.access_token]);\n\n    // Filter the tracks to the top 10, choosing longer term favourites where possible\n    const tracks = useMemo(() => {\n        let ret;\n        switch (currentTab) {\n            case 0:\n                // Combined\n                ret = uniqBy(\n                    longTerm\n                        .concat(mediumTerm, shortTerm)\n                        .filter(track => isEligible(track, year)),\n                    'id',\n                );\n                break;\n            case 1:\n                ret = longTerm.filter(track => isEligible(track, year));\n                break;\n            case 2:\n                ret = mediumTerm.filter(track => isEligible(track, year));\n                break;\n            case 3:\n                ret = shortTerm.filter(track => isEligible(track, year));\n                break;\n        }\n\n        if (uniqueArtists) {\n            // If unique by artist, filter by the first artist who tends to be the main one\n            return uniqBy(ret, track => {\n                return track.artists[0].name;\n            });\n        } else {\n            return ret;\n        }\n\n    }, [shortTerm, mediumTerm, longTerm, year, uniqueArtists, currentTab]);\n\n    let content;\n    if (retrievalState === 'retrieved') {\n        content = <>\n            <Box my={'20px'}>\n                <Grid container justify={'center'}>\n                    <Grid item md={6}>\n                        <Button\n                            fullWidth\n                            variant={'contained'}\n                            size={'large'}\n                            color={'primary'}\n                            href={homeUrl}\n                        >\n                            Logout\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Paper>\n                <Grid container justify={'center'}>\n                    <Grid item>\n                        <FormGroup row>\n                            <TextField\n                                label=\"Year\"\n                                type=\"number\"\n                                value={year}\n                                onChange={e => {\n                                    setYear(e.target.value);\n                                }}\n                            />\n                            <FormControlLabel control={\n                                <Checkbox\n                                    checked={uniqueArtists}\n                                    onChange={e => {\n                                        setUniqueArtists(e.target.checked);\n                                    }}\n                                />\n                            }\n                                label={'Unique Artists'}\n                            />\n                        </FormGroup>\n                    </Grid>\n                </Grid>\n                <Tabs\n                    variant={'fullWidth'}\n                    value={currentTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(e, value) => {\n                        setCurrentTab(value);\n                    }}\n                >\n                    <Tab label=\"Combined\"/>\n                    <Tab label=\"Long Term\"/>\n                    <Tab label=\"Medium Term\"/>\n                    <Tab label=\"Short Term\"/>\n                </Tabs>\n                <TableContainer component={Paper}>\n                    <Table style={{ tableLayout: 'fixed' }}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell style={{ width: '10%' }}>Rank</TableCell>\n                                <TableCell style={{ width: '45%' }}>Song</TableCell>\n                                <TableCell style={{ width: '45%' }}>Artists</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                tracks\n                                    .slice(tablePage * 10, tablePage * 10 + 10)\n                                    .map((track, i) => {\n                                        return (\n                                            <TableRow>\n                                                <TableCell>{tablePage * 10 + i + 1}</TableCell>\n                                                <TableCell>\n                                                    <Link href={track.external_urls.spotify}\n                                                        target=\"_blank\">\n                                                        {track.name}\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>{\n                                                    track.artists.map((artist, i, arr) => {\n                                                        const children = [\n                                                            <Link\n                                                                href={artist.external_urls.spotify}\n                                                                target=\"_blank\">\n                                                                {artist.name}\n                                                            </Link>\n                                                        ];\n                                                        if (i < arr.length - 1) {\n                                                            children.push(<span>, </span>);\n                                                        }\n                                                        return <>{children}</>;\n                                                    })\n                                                }\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })\n                            }\n                        </TableBody>\n                        <TableFooter>\n                            <TableRow>\n                                <TablePagination\n                                    page={tablePage}\n                                    count={tracks.length}\n                                    onChangePage={(e, newPage) => {\n                                        setTablePage(newPage);\n                                    }}\n                                    rowsPerPage={10}\n                                    rowsPerPageOptions={[10]}\n                                />\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        </>;\n    } else if (!('access_token' in hash)) {\n        content = (\n            <Box mt={'20px'}>\n                <Grid container justify={'center'}>\n                    <Grid item md={6}>\n                        <Button\n                            fullWidth\n                            variant={'contained'}\n                            size={'large'}\n                            color={'primary'}\n                            href={loginUrl}\n                        >\n                            Login with Spotify\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Box>\n        );\n    } else {\n        content = (<CircularProgress/>);\n    }\n\n    return <Container maxWidth={'md'}>\n        <Grid container justify={'center'}>\n            <Grid item style={{\n                textAlign: 'center',\n            }}>\n                <Typography variant={'h2'}>\n                    Spottest 100\n                </Typography>\n                <Typography variant={'subtitle1'}>\n                    A calculator for your Triple J Hottest 100 votes, using your music library\n                </Typography>\n                {content}\n            </Grid>\n        </Grid>\n    </Container>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nReactDOM.render(\n    <Router>\n        <CssBaseline>\n            <App/>\n        </CssBaseline>\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}